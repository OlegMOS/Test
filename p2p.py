#Разработай систему управления учетными записями пользователей для небольшой компании.
# Компания разделяет сотрудников на обычных работников и администраторов.
# У каждого сотрудника есть уникальный идентификатор (ID), имя и уровень доступа.
# Администраторы, помимо обычных данных пользователей, имеют дополнительный уровень доступа
# и могут добавлять или удалять пользователя из системы.
#Требования:
#1. Класс User*: Этот класс должен инкапсулировать данные о пользователе: ID, имя и уровень доступа ('user' для обычных сотрудников).
#2. Класс Admin: Этот класс должен наследоваться от класса User. Добавь дополнительный атрибут уровня доступа,
# специфичный для администраторов ('admin'). Класс должен также содержать методы add_user и remove_user,
# которые позволяют добавлять и удалять пользователей из списка (представь, что это просто список экземпляров User).
#3. Инкапсуляция данных: Убедись, что атрибуты классов защищены от прямого доступа и модификации снаружи.
# Предоставь доступ к необходимым атрибутам через методы  public, _protected, __private и get и set методы.

#______________________Создание класса User___________________________________________________________________________

#('user' для обычных сотрудников, 'admin' для администраторов)
class User: # Инкапсулируем данные о пользователе
    def __init__(self, id, name): # Инициализируем данные о пользователе (id, name)
        self.__id = id # id пользователя
        self.__name = name # имя пользователя
        self.__access_level = 'user' # уровень доступа пользователя

    def get_id(self): # Возвращает идентификатор пользователя (id)
        return self.__id

    def get_name(self): # Возвращает имя пользователя (name)
        return self.__name

    def get_access_level(self): # Возвращает уровень доступа пользователя (access_level)
        return self.__access_level

    def set_access_level(self, access_level): # Устанавливает уровень доступа пользователя (access_level)
        self.__access_level = access_level

    def __str__(self): # Возвращает строковое представление объекта класса  и его атрибутов (id, name, access_level)
        return f'ID: {self.get_id()}\nИмя: {self.get_name()}\nУровень доступа: {self.get_access_level()}'

    def __repr__(self): # Возвращает строковое представление объекта класса и его атрибутов (id, name, access_level)
        return f'User(id={self.get_id()}, имя={self.get_name()}, уровень доступа={self.get_access_level()})'

    def _protected_method(self): #
        print('Это защищенный метод.') # Выводим сообщение об ошибке

    def __private_method(self):
        print('Это приватный метод.')

#______________________Создание производного класса Admin от User ___________________________________________________________________________

class Admin(User): # Инкапсулируем данные о пользователе (id, name, access_level)
    def __init__(self, id, name): # Инициализируем данные о пользователе (id, name)
        super().__init__(id, name) # Инициализируем данные о пользователе (id, name)
        self.__access_level = 'admin' # уровень доступа пользователя

    def add_user(self, user): # Добавляем пользователя в список пользователей
        print(f'Добавляем пользователя {user.get_name()} с ID {user.get_id()} в систему.') # Выводим сообщение об успешном добавлении пользователя

    def remove_user(self, user): # Удаляем пользователя из списка пользователей
        print(f'Удаляем пользователя {user.get_name()} с ID {user.get_id()} из системы.') # Выводим сообщение об успешном удалении пользователя

    def __str__(self): # Возвращает строковое представление объекта класса  и его атрибутов (id, name, access_level)
        return f'ID: {self.get_id()}\nИмя: {self.get_name()}\nУровень доступа: {self.get_access_level()}'

    def __repr__(self): # Возвращает строковое представление объекта класса и его атрибутов (id, name, access_level)
        return f'Admin(id={self.get_id()}, имя={self.get_name()}, уровень доступа={self.get_access_level()})'

    def _protected_method(self): #Выводим сообщение об ошибке
        print('Это защищенный метод.')

    def __private_method(self): #Выводим сообщение об ошибке
        print('Это приватный метод.')

# Пример использования

user = User('12345', 'Иван Петров') # Присваиваем данные о пользователе (id, name)
admin = Admin('888', 'Лия Строгая') # Присваиваем данные о пользователе (id, name)
admin2 = Admin('555', 'Павел Павлов') # Присваиваем данные о пользователе (id, name)
print(user) # Выводим данные о user
print(' ')
print(admin) # Выводим данные о admin
print(' ')

print('Устанавливаем уровень доступа пользователя:')
admin.set_access_level('admin') # Устанавливаем уровень доступа пользователя (access_level)
print(admin)
print(' ')

admin.add_user(admin2) # Добавляем пользователя в список
print(admin2)
print(' ')

admin.remove_user(user) # Удаляем пользователя из списка пользователей